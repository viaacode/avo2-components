def TEMPLATEPATH = 'https://raw.githubusercontent.com/viaacode/openshift_pipeline-jenkins-exmp/master/openshift/app_deployment-okd.yaml'
def TEMPLATENAME = 'avo2-components'
def TARGET_NS = 'shared-components'
def templatePath = 'https://raw.githubusercontent.comviaacode/avo2-components/master/openshift/app_deployment-okd.yaml'
// NOTE, the "pipeline" directive/closure from the declarative pipeline syntax needs to include, or be nested outside,
// and "openshift" directive/closure from the OpenShift Client Plugin for Jenkins.  Otherwise, the declarative pipeline engine
// will not be fully engaged.
pipeline {
    agent {
      node {
        // spin up a pod to run this build on
        label 'nodejs'
      }
    }
    options {
        // set a timeout of 20 minutes for this pipeline
        timeout(time: 35, unit: 'MINUTES')
    }
    stages {
        stage('preamble') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject("shared-components") {
                            echo "Using project: ${openshift.project()}"
                        }
                    }
                }
            }
        }
        stage('cleanup') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject("shared-components") {
                            // delete everything with this template label
			    if (openshift.selector("template", "avo2-components").exists()) {
				    echo " tmpl exists"
				    openshift.selector("all", [ template : "avo2-components" ]).delete()

			    }
                            //openshift.selector("all", [ statefulset  : TEMPLATENAME ]).delete()
                            sh '''#!/bin/bash
				echo no deployment for this build so nothing to clean
                            '''
                        }
                    }
                } // script
            } // steps
        } // stage



        stage('create templates') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject("shared-components") {
                            // create a new application from the TEMPLATEPATH
                           // openshift.newApp(TEMPLATEPATH)
                           sh "oc -n shared-components apply -f openshift/app_deployment-okd.yaml"
                           echo "added template to namespace"
                            sh '''#!/bin/bash
                                  oc -n shared-components  get templates

                               '''
                        }
                    }
                } // script
            } // steps
        } // stage
        stage('build image') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject("shared-components") {
			    if (openshift.selector("buildconfig", "avo2-components-tst").exists()) {
				    echo " buildconfig  exists"
				    sh '''#/bin/bash
				    oc start-build avo2-components-tst
				    '''
				    openshift.selector("all", [ template : "avo2-components" ]).delete()

			    } else {
			     echo "create a new build"
                             sh '''#!/bin/bash
                             oc project shared-components
                             oc -n shared-components new-build --name=avo2-components-tst  --strategy=docker  .
                             '''
			    }
                
                        }
                    }
                } // script
            } // steps
        } // stage
        stage('Follow Build') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject("shared-components") {
                            echo "Get build and follow the output"
                            sh '''#!/bin/bash
                            echo building starts ...
                            oc -n shared-components get builds
                            oc -n shared-components logs -f bc/avo2-components-tst
                            echo build  finished exitcode $?

                            '''

                        }
                    }


                } // script

            } // steps
        } // stage




               stage('Roll out') {
            steps {

                script {
                    openshift.withCluster() {
                        openshift.withProject("shared-components") {
                             echo "Rolling out  build from template"
                             sh '''#/bin/bash
			     echo "nothing to roll out"
                             # oc process -p ENV=tst -l app=avo2-components -l component=frontend -l ENV=tst  -f openshift/app_deployment-okd.yaml | oc apply -f -
                             '''
                        }
                    }
                } // script
            } // steps
        } // stage

		  stage('Publish') {
            steps {

                script {
                    openshift.withCluster() {
                        openshift.withProject("shared-components") {
                             echo "Publishing package to registry"
                             sh '''#/bin/bash
                             npm publish

                             '''
                        }
                    }
                } // script
            } // steps
        } // stage


               stage('Tag out') {
            steps {
            input message: "TAG images for prd ?:avo2-components. Approve?", id: "approval"

                script {
                    openshift.withCluster() {
                        openshift.withProject("shared-components") {
                             echo "Rolling out  build from template"
                             sh '''#!/bin/bash
                              oc  -n shared-components tag  avo2-components-tst:latest  avo2-components-qas:latest
                              oc  -n shared-components tag avo2-components-tst:latest avo2-components-prd:latest
                             '''
                        }
                    }
                } // script
            } // steps
        } // stag
    } // stages
} // pipeline
