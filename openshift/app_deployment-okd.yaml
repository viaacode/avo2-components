apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: avo2-components
objects:
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    generation: 11
    labels:
      ENV: ${ENV}
      app: avo2-components
      component: frontend
    name: avo2-components-${ENV}
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      ENV: ${ENV}
      app: avo2-components
      component: frontend
      deploymentconfig: avo2-components-${ENV}
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftNewApp
        creationTimestamp: null
        labels:
          ENV: ${ENV}
          app: avo2-components
          component: frontend
          deploymentconfig: avo2-components-${ENV}
      spec:
        containers:
        - image: docker-registry.default.svc:5000/shared-components/avo2-components-${ENV}:latest
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 4000
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: avo2-components-${ENV}
          ports:
          - containerPort: 4000
            name: http
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 4000
            timeoutSeconds: 3
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - avo2-components-${ENV}
        from:
          kind: ImageStreamTag
          name: avo2-components-${ENV}:latest
          namespace: shared-components
        lastTriggeredImage: docker-registry.default.svc:5000/shared-components/avo2-components:latest
      type: ImageChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0

- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      ENV: ${ENV}
      app: avo2-components
      component: frontend
    name: avo2-components-${ENV}
  spec:
    externalTrafficPolicy: Cluster
    ports:
    - name: "http"
      port: 4000
      protocol: TCP
    selector:
      ENV: ${ENV}
      app: avo2-components
      component: frontend
    sessionAffinity: None
    type: LoadBalancer
  status:
    loadBalancer: {}
parameters:
  - name: ENV
    value: qas
