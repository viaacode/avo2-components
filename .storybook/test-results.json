{"numFailedTestSuites":1,"numFailedTests":1,"numPassedTestSuites":29,"numPassedTests":194,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":30,"numTotalTests":195,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1560857524463,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["<Select />"],"failureMessages":[],"fullName":"<Select /> Should be able to render","location":null,"status":"passed","title":"Should be able to render"},{"ancestorTitles":["<Select />"],"failureMessages":[],"fullName":"<Select /> Should set the correct className","location":null,"status":"passed","title":"Should set the correct className"},{"ancestorTitles":["<Select />"],"failureMessages":[],"fullName":"<Select /> Should correctly render the given options","location":null,"status":"passed","title":"Should correctly render the given options"},{"ancestorTitles":["<Select />"],"failureMessages":[],"fullName":"<Select /> Should pass on the id","location":null,"status":"passed","title":"Should pass on the id"},{"ancestorTitles":["<Select />"],"failureMessages":[],"fullName":"<Select /> Should be able to set the disabled state","location":null,"status":"passed","title":"Should be able to set the disabled state"},{"ancestorTitles":["<Select />"],"failureMessages":[],"fullName":"<Select /> Should be able to set an initial value","location":null,"status":"passed","title":"Should be able to set an initial value"},{"ancestorTitles":["<Select />"],"failureMessages":[],"fullName":"<Select /> Should call the onChange handler when the select option changes","location":null,"status":"passed","title":"Should call the onChange handler when the select option changes"}],"endTime":1560857529112,"message":"","name":"/Users/benjaminnaesen/Vault/avo2-components/src/components/Select/Select.test.tsx","startTime":1560857526481,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["<MetaDataItem />"],"failureMessages":[],"fullName":"<MetaDataItem /> Should be able to render","location":null,"status":"passed","title":"Should be able to render"},{"ancestorTitles":["<MetaDataItem />"],"failureMessages":[],"fullName":"<MetaDataItem /> Should set the correct className","location":null,"status":"passed","title":"Should set the correct className"},{"ancestorTitles":["<MetaDataItem />"],"failureMessages":["Error: expect(received).toEqual(expected) // deep equality\n\nExpected: true\nReceived: false\n    at Object.toEqual (/Users/benjaminnaesen/Vault/avo2-components/src/components/MetaDataItem/MetaDataItem.test.tsx:20:69)\n    at Object.asyncJestTest (/Users/benjaminnaesen/Vault/avo2-components/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\n    at resolve (/Users/benjaminnaesen/Vault/avo2-components/node_modules/jest-jasmine2/build/queueRunner.js:43:12)\n    at new Promise (<anonymous>)\n    at mapper (/Users/benjaminnaesen/Vault/avo2-components/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at promise.then (/Users/benjaminnaesen/Vault/avo2-components/node_modules/jest-jasmine2/build/queueRunner.js:73:41)\n    at process._tickCallback (internal/process/next_tick.js:68:7)"],"fullName":"<MetaDataItem /> Should set the correct className when icon is passed","location":null,"status":"failed","title":"Should set the correct className when icon is passed"}],"endTime":1560857529678,"message":"  ● <MetaDataItem /> › Should set the correct className when icon is passed\n\n    expect(received).toEqual(expected) // deep equality\n\n    Expected: true\n    Received: false\n\n      18 | \t\tconst metaDataItemComponent = shallow(<MetaDataItem icon=\"headphone\" label=\"768\" />);\n      19 | \n    > 20 | \t\texpect(metaDataItemComponent.hasClass('c-meta-data__item--icon')).toEqual(true);\n         | \t\t                                                                  ^\n      21 | \t});\n      22 | });\n      23 | \n\n      at Object.toEqual (src/components/MetaDataItem/MetaDataItem.test.tsx:20:69)\n","name":"/Users/benjaminnaesen/Vault/avo2-components/src/components/MetaDataItem/MetaDataItem.test.tsx","startTime":1560857526492,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["<TagList />"],"failureMessages":[],"fullName":"<TagList /> Should be able to render","location":null,"status":"passed","title":"Should be able to render"},{"ancestorTitles":["<TagList />"],"failureMessages":[],"fullName":"<TagList /> Should set the correct className","location":null,"status":"passed","title":"Should set the correct className"},{"ancestorTitles":["<TagList />"],"failureMessages":[],"fullName":"<TagList /> Should be able to render with swatches","location":null,"status":"passed","title":"Should be able to render with swatches"},{"ancestorTitles":["<TagList />"],"failureMessages":[],"fullName":"<TagList /> Should be able to render without swatches","location":null,"status":"passed","title":"Should be able to render without swatches"},{"ancestorTitles":["<TagList />"],"failureMessages":[],"fullName":"<TagList /> Should be able to render with borders","location":null,"status":"passed","title":"Should be able to render with borders"},{"ancestorTitles":["<TagList />"],"failureMessages":[],"fullName":"<TagList /> Should be able to render without borders","location":null,"status":"passed","title":"Should be able to render without borders"},{"ancestorTitles":["<TagList />"],"failureMessages":[],"fullName":"<TagList /> Should be able to render close buttons","location":null,"status":"passed","title":"Should be able to render close buttons"},{"ancestorTitles":["<TagList />"],"failureMessages":[],"fullName":"<TagList /> Should call `onTagClosed` when closing a tag","location":null,"status":"passed","title":"Should call `onTagClosed` when closing a tag"}],"endTime":1560857529728,"message":"","name":"/Users/benjaminnaesen/Vault/avo2-components/src/components/TagList/TagList.test.tsx","startTime":1560857526481,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["<MetaDataItem />"],"failureMessages":[],"fullName":"<MetaDataItem /> Should be able to render","location":null,"status":"passed","title":"Should be able to render"},{"ancestorTitles":["<MetaDataItem />"],"failureMessages":[],"fullName":"<MetaDataItem /> Should set the correct className","location":null,"status":"passed","title":"Should set the correct className"},{"ancestorTitles":["<MetaDataItem />"],"failureMessages":[],"fullName":"<MetaDataItem /> Should set the correct className with each category","location":null,"status":"passed","title":"Should set the correct className with each category"},{"ancestorTitles":["<MetaDataItem />"],"failureMessages":[],"fullName":"<MetaDataItem /> Should set the correct className when spaced is passed","location":null,"status":"passed","title":"Should set the correct className when spaced is passed"},{"ancestorTitles":["<MetaDataItem />"],"failureMessages":[],"fullName":"<MetaDataItem /> Should correctly pass children","location":null,"status":"passed","title":"Should correctly pass children"}],"endTime":1560857529730,"message":"","name":"/Users/benjaminnaesen/Vault/avo2-components/src/components/MetaData/MetaData.test.tsx","startTime":1560857526489,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["<TextInput />"],"failureMessages":[],"fullName":"<TextInput /> Should be able to render","location":null,"status":"passed","title":"Should be able to render"},{"ancestorTitles":["<TextInput />"],"failureMessages":[],"fullName":"<TextInput /> Should set the correct className","location":null,"status":"passed","title":"Should set the correct className"},{"ancestorTitles":["<TextInput />"],"failureMessages":[],"fullName":"<TextInput /> Should pass on the id","location":null,"status":"passed","title":"Should pass on the id"},{"ancestorTitles":["<TextInput />"],"failureMessages":[],"fullName":"<TextInput /> Should be able to set the disabled state","location":null,"status":"passed","title":"Should be able to set the disabled state"},{"ancestorTitles":["<TextInput />"],"failureMessages":[],"fullName":"<TextInput /> Should be able to set the placeholder value","location":null,"status":"passed","title":"Should be able to set the placeholder value"},{"ancestorTitles":["<TextInput />"],"failureMessages":[],"fullName":"<TextInput /> Should be able to set an initial value","location":null,"status":"passed","title":"Should be able to set an initial value"},{"ancestorTitles":["<TextInput />"],"failureMessages":[],"fullName":"<TextInput /> Should be able to render with an icon","location":null,"status":"passed","title":"Should be able to render with an icon"},{"ancestorTitles":["<TextInput />"],"failureMessages":[],"fullName":"<TextInput /> Should call the onChange handler when the input changes","location":null,"status":"passed","title":"Should call the onChange handler when the input changes"}],"endTime":1560857529743,"message":"","name":"/Users/benjaminnaesen/Vault/avo2-components/src/components/TextInput/TextInput.test.tsx","startTime":1560857526487,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["<Icon />"],"failureMessages":[],"fullName":"<Icon /> Should render when a known icon is passed","location":null,"status":"passed","title":"Should render when a known icon is passed"},{"ancestorTitles":["<Icon />"],"failureMessages":[],"fullName":"<Icon /> Should not render when an unknown icon is passed","location":null,"status":"passed","title":"Should not render when an unknown icon is passed"},{"ancestorTitles":["<Icon />"],"failureMessages":[],"fullName":"<Icon /> Should render icon when name was passed as PascalCase","location":null,"status":"passed","title":"Should render icon when name was passed as PascalCase"},{"ancestorTitles":["<Icon />"],"failureMessages":[],"fullName":"<Icon /> Should render icon when name was passed as kebab-case","location":null,"status":"passed","title":"Should render icon when name was passed as kebab-case"},{"ancestorTitles":["<Icon />"],"failureMessages":[],"fullName":"<Icon /> Should correctly set the className without type","location":null,"status":"passed","title":"Should correctly set the className without type"},{"ancestorTitles":["<Icon />"],"failureMessages":[],"fullName":"<Icon /> Should correctly set the className with type","location":null,"status":"passed","title":"Should correctly set the className with type"},{"ancestorTitles":["<Icon />"],"failureMessages":[],"fullName":"<Icon /> Should correctly set the sizing className","location":null,"status":"passed","title":"Should correctly set the sizing className"},{"ancestorTitles":["<Icon />"],"failureMessages":[],"fullName":"<Icon /> Should correctly set the className when active","location":null,"status":"passed","title":"Should correctly set the className when active"}],"endTime":1560857529810,"message":"","name":"/Users/benjaminnaesen/Vault/avo2-components/src/components/Icon/Icon.test.tsx","startTime":1560857526570,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["<ToggleButton />"],"failureMessages":[],"fullName":"<ToggleButton /> Should be able to render","location":null,"status":"passed","title":"Should be able to render"},{"ancestorTitles":["<ToggleButton />"],"failureMessages":[],"fullName":"<ToggleButton /> Should set the normal version of the icon when not `active`","location":null,"status":"passed","title":"Should set the normal version of the icon when not `active`"},{"ancestorTitles":["<ToggleButton />"],"failureMessages":[],"fullName":"<ToggleButton /> Should set the filled version of the icon when `active`","location":null,"status":"passed","title":"Should set the filled version of the icon when `active`"},{"ancestorTitles":["<ToggleButton />"],"failureMessages":[],"fullName":"<ToggleButton /> Should call the `onClick`-handler when clicked","location":null,"status":"passed","title":"Should call the `onClick`-handler when clicked"}],"endTime":1560857529824,"message":"","name":"/Users/benjaminnaesen/Vault/avo2-components/src/components/ToggleButton/ToggleButton.test.tsx","startTime":1560857526575,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["<Pagination />"],"failureMessages":[],"fullName":"<Pagination /> Should be able to render","location":null,"status":"passed","title":"Should be able to render"},{"ancestorTitles":["<Pagination />"],"failureMessages":[],"fullName":"<Pagination /> Should set the correct className","location":null,"status":"passed","title":"Should set the correct className"},{"ancestorTitles":["<Pagination />"],"failureMessages":[],"fullName":"<Pagination /> Should render pages equal to the `displayCount`","location":null,"status":"passed","title":"Should render pages equal to the `displayCount`"},{"ancestorTitles":["<Pagination />"],"failureMessages":[],"fullName":"<Pagination /> Should render pages equal to the `pageCount` if it is less than the `displayCount`","location":null,"status":"passed","title":"Should render pages equal to the `pageCount` if it is less than the `displayCount`"},{"ancestorTitles":["<Pagination />"],"failureMessages":[],"fullName":"<Pagination /> Should render the current page in an active state","location":null,"status":"passed","title":"Should render the current page in an active state"},{"ancestorTitles":["<Pagination />"],"failureMessages":[],"fullName":"<Pagination /> Should correctly set the `initialPageIndex`","location":null,"status":"passed","title":"Should correctly set the `initialPageIndex`"},{"ancestorTitles":["<Pagination />"],"failureMessages":[],"fullName":"<Pagination /> Should render pages padded around the current page based on the `displayCount`","location":null,"status":"passed","title":"Should render pages padded around the current page based on the `displayCount`"},{"ancestorTitles":["<Pagination />"],"failureMessages":[],"fullName":"<Pagination /> Should render the first x pages when the current page is lower than the (odd) `displayCount`","location":null,"status":"passed","title":"Should render the first x pages when the current page is lower than the (odd) `displayCount`"},{"ancestorTitles":["<Pagination />"],"failureMessages":[],"fullName":"<Pagination /> Should render the first x pages when the current page is lower than the (even) `displayCount`","location":null,"status":"passed","title":"Should render the first x pages when the current page is lower than the (even) `displayCount`"},{"ancestorTitles":["<Pagination />"],"failureMessages":[],"fullName":"<Pagination /> Should render the last x pages when if the currentPage is equal less than the `pageCount` minus the (odd) `displayCount`","location":null,"status":"passed","title":"Should render the last x pages when if the currentPage is equal less than the `pageCount` minus the (odd) `displayCount`"},{"ancestorTitles":["<Pagination />"],"failureMessages":[],"fullName":"<Pagination /> Should render the last x pages when if the currentPage is equal less than the `pageCount` minus the (even) `displayCount`","location":null,"status":"passed","title":"Should render the last x pages when if the currentPage is equal less than the `pageCount` minus the (even) `displayCount`"},{"ancestorTitles":["<Pagination />"],"failureMessages":[],"fullName":"<Pagination /> Should call `onPageChange` when changing pages internally","location":null,"status":"passed","title":"Should call `onPageChange` when changing pages internally"},{"ancestorTitles":["<Pagination />"],"failureMessages":[],"fullName":"<Pagination /> Should not call `onPageChange` when changing page to the current page","location":null,"status":"passed","title":"Should not call `onPageChange` when changing page to the current page"},{"ancestorTitles":["<Pagination />"],"failureMessages":[],"fullName":"<Pagination /> Should be able to jump to the previous page","location":null,"status":"passed","title":"Should be able to jump to the previous page"},{"ancestorTitles":["<Pagination />"],"failureMessages":[],"fullName":"<Pagination /> Should be able to jump to the next page","location":null,"status":"passed","title":"Should be able to jump to the next page"},{"ancestorTitles":["<Pagination />"],"failureMessages":[],"fullName":"<Pagination /> Should be able to jump to the first page","location":null,"status":"passed","title":"Should be able to jump to the first page"},{"ancestorTitles":["<Pagination />"],"failureMessages":[],"fullName":"<Pagination /> Should be able to jump to the last page","location":null,"status":"passed","title":"Should be able to jump to the last page"}],"endTime":1560857529835,"message":"","name":"/Users/benjaminnaesen/Vault/avo2-components/src/components/Pagination/Pagination.test.tsx","startTime":1560857526487,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["<Button />"],"failureMessages":[],"fullName":"<Button /> Should be able to render","location":null,"status":"passed","title":"Should be able to render"},{"ancestorTitles":["<Button />"],"failureMessages":[],"fullName":"<Button /> Should set the correct className","location":null,"status":"passed","title":"Should set the correct className"},{"ancestorTitles":["<Button />"],"failureMessages":[],"fullName":"<Button /> Should set the correct size className","location":null,"status":"passed","title":"Should set the correct size className"},{"ancestorTitles":["<Button />"],"failureMessages":[],"fullName":"<Button /> Should set the correct width className when passing block option","location":null,"status":"passed","title":"Should set the correct width className when passing block option"},{"ancestorTitles":["<Button />"],"failureMessages":[],"fullName":"<Button /> Should set the correct type className","location":null,"status":"passed","title":"Should set the correct type className"},{"ancestorTitles":["<Button />"],"failureMessages":[],"fullName":"<Button /> Should be able to render a label","location":null,"status":"passed","title":"Should be able to render a label"},{"ancestorTitles":["<Button />"],"failureMessages":[],"fullName":"<Button /> Should not to render a label when none is passed","location":null,"status":"passed","title":"Should not to render a label when none is passed"},{"ancestorTitles":["<Button />"],"failureMessages":[],"fullName":"<Button /> Should be able to render a label and an icon","location":null,"status":"passed","title":"Should be able to render a label and an icon"},{"ancestorTitles":["<Button />"],"failureMessages":[],"fullName":"<Button /> Should get a special className when only an icon is passed","location":null,"status":"passed","title":"Should get a special className when only an icon is passed"},{"ancestorTitles":["<Button />"],"failureMessages":[],"fullName":"<Button /> Should be able to render an arrow at the end of the button","location":null,"status":"passed","title":"Should be able to render an arrow at the end of the button"},{"ancestorTitles":["<Button />"],"failureMessages":[],"fullName":"<Button /> Should call the `onClick`-handler when clicked","location":null,"status":"passed","title":"Should call the `onClick`-handler when clicked"},{"ancestorTitles":["<Button />"],"failureMessages":[],"fullName":"<Button /> Should pass on the `disabled`-attribute","location":null,"status":"passed","title":"Should pass on the `disabled`-attribute"},{"ancestorTitles":["<Button />"],"failureMessages":[],"fullName":"<Button /> Should set the correct classNames when `active` is passed","location":null,"status":"passed","title":"Should set the correct classNames when `active` is passed"},{"ancestorTitles":["<Button />"],"failureMessages":[],"fullName":"<Button /> Should pass on the `active`-prop to the button icon","location":null,"status":"passed","title":"Should pass on the `active`-prop to the button icon"}],"endTime":1560857529855,"message":"","name":"/Users/benjaminnaesen/Vault/avo2-components/src/components/Button/Button.test.tsx","startTime":1560857526512,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["<RadioButtonGroup />"],"failureMessages":[],"fullName":"<RadioButtonGroup /> Should be able to render","location":null,"status":"passed","title":"Should be able to render"},{"ancestorTitles":["<RadioButtonGroup />"],"failureMessages":[],"fullName":"<RadioButtonGroup /> Should set the correct className","location":null,"status":"passed","title":"Should set the correct className"},{"ancestorTitles":["<RadioButtonGroup />"],"failureMessages":[],"fullName":"<RadioButtonGroup /> Should set the correct inline className","location":null,"status":"passed","title":"Should set the correct inline className"},{"ancestorTitles":["<RadioButtonGroup />"],"failureMessages":[],"fullName":"<RadioButtonGroup /> Should correctly pass children","location":null,"status":"passed","title":"Should correctly pass children"}],"endTime":1560857529926,"message":"","name":"/Users/benjaminnaesen/Vault/avo2-components/src/components/RadioButtonGroup/RadioButtonGroup.test.tsx","startTime":1560857526480,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["<Modal />"],"failureMessages":[],"fullName":"<Modal /> Should be able to render","location":null,"status":"passed","title":"Should be able to render"},{"ancestorTitles":["<Modal />"],"failureMessages":[],"fullName":"<Modal /> Should set the correct className(s)","location":null,"status":"passed","title":"Should set the correct className(s)"},{"ancestorTitles":["<Modal />"],"failureMessages":[],"fullName":"<Modal /> Should set the correct className for every size","location":null,"status":"passed","title":"Should set the correct className for every size"},{"ancestorTitles":["<Modal />"],"failureMessages":[],"fullName":"<Modal /> Should be able to render with a title","location":null,"status":"passed","title":"Should be able to render with a title"},{"ancestorTitles":["<Modal />"],"failureMessages":[],"fullName":"<Modal /> Should be able to render without a title","location":null,"status":"passed","title":"Should be able to render without a title"},{"ancestorTitles":["<Modal />"],"failureMessages":[],"fullName":"<Modal /> Should be able to be rendered invisible","location":null,"status":"passed","title":"Should be able to be rendered invisible"},{"ancestorTitles":["<Modal />"],"failureMessages":[],"fullName":"<Modal /> Should be able to be rendered visible ","location":null,"status":"passed","title":"Should be able to be rendered visible "},{"ancestorTitles":["<Modal />"],"failureMessages":[],"fullName":"<Modal /> Should not show the backdrop when invisible","location":null,"status":"passed","title":"Should not show the backdrop when invisible"},{"ancestorTitles":["<Modal />"],"failureMessages":[],"fullName":"<Modal /> Should show the backdrop when visible","location":null,"status":"passed","title":"Should show the backdrop when visible"},{"ancestorTitles":["<Modal />"],"failureMessages":[],"fullName":"<Modal /> Should close when clicking around the modal ","location":null,"status":"passed","title":"Should close when clicking around the modal "},{"ancestorTitles":["<Modal />"],"failureMessages":[],"fullName":"<Modal /> Should not close when clicking inside the modal ","location":null,"status":"passed","title":"Should not close when clicking inside the modal "},{"ancestorTitles":["<Modal />"],"failureMessages":[],"fullName":"<Modal /> Should call the onClose handler when closing the modal","location":null,"status":"passed","title":"Should call the onClose handler when closing the modal"},{"ancestorTitles":["<Modal />"],"failureMessages":[],"fullName":"<Modal /> Should correctly render the body","location":null,"status":"passed","title":"Should correctly render the body"},{"ancestorTitles":["<Modal />"],"failureMessages":[],"fullName":"<Modal /> Should be able to render items in the header (right)","location":null,"status":"passed","title":"Should be able to render items in the header (right)"},{"ancestorTitles":["<Modal />"],"failureMessages":[],"fullName":"<Modal /> Should be able to render items in the footer (left)","location":null,"status":"passed","title":"Should be able to render items in the footer (left)"},{"ancestorTitles":["<Modal />"],"failureMessages":[],"fullName":"<Modal /> Should be able to render items in the footer (right)","location":null,"status":"passed","title":"Should be able to render items in the footer (right)"},{"ancestorTitles":["<Modal />"],"failureMessages":[],"fullName":"<Modal /> Should not render the footer when no footer render props are passed","location":null,"status":"passed","title":"Should not render the footer when no footer render props are passed"},{"ancestorTitles":["<Modal />"],"failureMessages":[],"fullName":"<Modal /> Should not render the left side of the footer when no ModalFooterLeft-slot is passed","location":null,"status":"passed","title":"Should not render the left side of the footer when no ModalFooterLeft-slot is passed"},{"ancestorTitles":["<Modal />"],"failureMessages":[],"fullName":"<Modal /> Should not render the right side of the footer when no ModalFooterRight-slot is passed","location":null,"status":"passed","title":"Should not render the right side of the footer when no ModalFooterRight-slot is passed"}],"endTime":1560857529967,"message":"","name":"/Users/benjaminnaesen/Vault/avo2-components/src/components/Modal/Modal.test.tsx","startTime":1560857526491,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["<Blankslate />"],"failureMessages":[],"fullName":"<Blankslate /> Should be able to render","location":null,"status":"passed","title":"Should be able to render"},{"ancestorTitles":["<Blankslate />"],"failureMessages":[],"fullName":"<Blankslate /> Should set the correct className","location":null,"status":"passed","title":"Should set the correct className"},{"ancestorTitles":["<Blankslate />"],"failureMessages":[],"fullName":"<Blankslate /> Should set the correct className when in spacious mode","location":null,"status":"passed","title":"Should set the correct className when in spacious mode"},{"ancestorTitles":["<Blankslate />"],"failureMessages":[],"fullName":"<Blankslate /> Should render the title correctly","location":null,"status":"passed","title":"Should render the title correctly"},{"ancestorTitles":["<Blankslate />"],"failureMessages":[],"fullName":"<Blankslate /> Should render the body correctly","location":null,"status":"passed","title":"Should render the body correctly"},{"ancestorTitles":["<Blankslate />"],"failureMessages":[],"fullName":"<Blankslate /> Should be able to render an icon","location":null,"status":"passed","title":"Should be able to render an icon"},{"ancestorTitles":["<Blankslate />"],"failureMessages":[],"fullName":"<Blankslate /> Should correctly pass children","location":null,"status":"passed","title":"Should correctly pass children"}],"endTime":1560857530444,"message":"","name":"/Users/benjaminnaesen/Vault/avo2-components/src/components/Blankslate/Blankslate.test.tsx","startTime":1560857529149,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["<Checkbox />"],"failureMessages":[],"fullName":"<Checkbox /> Should be able to render","location":null,"status":"passed","title":"Should be able to render"},{"ancestorTitles":["<Checkbox />"],"failureMessages":[],"fullName":"<Checkbox /> Should set the correct className","location":null,"status":"passed","title":"Should set the correct className"},{"ancestorTitles":["<Checkbox />"],"failureMessages":[],"fullName":"<Checkbox /> Should be able to render with id correctly set","location":null,"status":"passed","title":"Should be able to render with id correctly set"},{"ancestorTitles":["<Checkbox />"],"failureMessages":[],"fullName":"<Checkbox /> Should be able to render with label correctly set","location":null,"status":"passed","title":"Should be able to render with label correctly set"},{"ancestorTitles":["<Checkbox />"],"failureMessages":[],"fullName":"<Checkbox /> Should be able to render without an id","location":null,"status":"passed","title":"Should be able to render without an id"},{"ancestorTitles":["<Checkbox />"],"failureMessages":[],"fullName":"<Checkbox /> Should set the defaultChecked-prop as the initial state","location":null,"status":"passed","title":"Should set the defaultChecked-prop as the initial state"},{"ancestorTitles":["<Checkbox />"],"failureMessages":[],"fullName":"<Checkbox /> Should have a default value of false for the checked-state","location":null,"status":"passed","title":"Should have a default value of false for the checked-state"},{"ancestorTitles":["<Checkbox />"],"failureMessages":[],"fullName":"<Checkbox /> Should call `onChange` when toggling checkbox","location":null,"status":"passed","title":"Should call `onChange` when toggling checkbox"}],"endTime":1560857530537,"message":"","name":"/Users/benjaminnaesen/Vault/avo2-components/src/components/Checkbox/Checkbox.test.tsx","startTime":1560857529877,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["<CheckboxGroup />"],"failureMessages":[],"fullName":"<CheckboxGroup /> Should be able to render","location":null,"status":"passed","title":"Should be able to render"},{"ancestorTitles":["<CheckboxGroup />"],"failureMessages":[],"fullName":"<CheckboxGroup /> Should set the correct className","location":null,"status":"passed","title":"Should set the correct className"},{"ancestorTitles":["<CheckboxGroup />"],"failureMessages":[],"fullName":"<CheckboxGroup /> Should set the correct className when passing inline option","location":null,"status":"passed","title":"Should set the correct className when passing inline option"},{"ancestorTitles":["<CheckboxGroup />"],"failureMessages":[],"fullName":"<CheckboxGroup /> Should correctly pass children","location":null,"status":"passed","title":"Should correctly pass children"}],"endTime":1560857530549,"message":"","name":"/Users/benjaminnaesen/Vault/avo2-components/src/components/CheckboxGroup/CheckboxGroup.test.tsx","startTime":1560857529797,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["useKeyPress"],"failureMessages":[],"fullName":"useKeyPress Should call onPressDown when pressing target key","location":null,"status":"passed","title":"Should call onPressDown when pressing target key"},{"ancestorTitles":["useKeyPress"],"failureMessages":[],"fullName":"useKeyPress Should call onPressUp when releasing target key","location":null,"status":"passed","title":"Should call onPressUp when releasing target key"},{"ancestorTitles":["useKeyPress"],"failureMessages":[],"fullName":"useKeyPress Should not call onPressDown when pressing a key that is not the target key","location":null,"status":"passed","title":"Should not call onPressDown when pressing a key that is not the target key"},{"ancestorTitles":["useKeyPress"],"failureMessages":[],"fullName":"useKeyPress Should not call onPressUp when releasing a key that is not the target key","location":null,"status":"passed","title":"Should not call onPressUp when releasing a key that is not the target key"}],"endTime":1560857530567,"message":"","name":"/Users/benjaminnaesen/Vault/avo2-components/src/hooks/useKeypress.test.tsx","startTime":1560857529794,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["<Container />"],"failureMessages":[],"fullName":"<Container /> Should be able to render","location":null,"status":"passed","title":"Should be able to render"},{"ancestorTitles":["<Container />"],"failureMessages":[],"fullName":"<Container /> Should set the correct classNames when in horizontal mode","location":null,"status":"passed","title":"Should set the correct classNames when in horizontal mode"},{"ancestorTitles":["<Container />"],"failureMessages":[],"fullName":"<Container /> Should set the correct classNames when passing `size` in horizontal mode","location":null,"status":"passed","title":"Should set the correct classNames when passing `size` in horizontal mode"},{"ancestorTitles":["<Container />"],"failureMessages":[],"fullName":"<Container /> Should set the correct classNames when in vertical mode","location":null,"status":"passed","title":"Should set the correct classNames when in vertical mode"},{"ancestorTitles":["<Container />"],"failureMessages":[],"fullName":"<Container /> Should set the correct classNames when passing `size` in vertical mode","location":null,"status":"passed","title":"Should set the correct classNames when passing `size` in vertical mode"},{"ancestorTitles":["<Container />"],"failureMessages":[],"fullName":"<Container /> Should be able to have an `alt` background","location":null,"status":"passed","title":"Should be able to have an `alt` background"},{"ancestorTitles":["<Container />"],"failureMessages":[],"fullName":"<Container /> Should be able to have an `inverse` background","location":null,"status":"passed","title":"Should be able to have an `inverse` background"},{"ancestorTitles":["<Container />"],"failureMessages":[],"fullName":"<Container /> Should be able to be rendered with a bottom border","location":null,"status":"passed","title":"Should be able to be rendered with a bottom border"},{"ancestorTitles":["<Container />"],"failureMessages":[],"fullName":"<Container /> Should correctly pass children","location":null,"status":"passed","title":"Should correctly pass children"}],"endTime":1560857530595,"message":"","name":"/Users/benjaminnaesen/Vault/avo2-components/src/components/Container/Container.test.tsx","startTime":1560857529873,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["<RadioButton />"],"failureMessages":[],"fullName":"<RadioButton /> Should be able to render","location":null,"status":"passed","title":"Should be able to render"},{"ancestorTitles":["<RadioButton />"],"failureMessages":[],"fullName":"<RadioButton /> Should set the correct className","location":null,"status":"passed","title":"Should set the correct className"},{"ancestorTitles":["<RadioButton />"],"failureMessages":[],"fullName":"<RadioButton /> Should be able to render with id correctly set","location":null,"status":"passed","title":"Should be able to render with id correctly set"},{"ancestorTitles":["<RadioButton />"],"failureMessages":[],"fullName":"<RadioButton /> Should be able to render with name correctly set","location":null,"status":"passed","title":"Should be able to render with name correctly set"},{"ancestorTitles":["<RadioButton />"],"failureMessages":[],"fullName":"<RadioButton /> Should be able to render with label correctly set","location":null,"status":"passed","title":"Should be able to render with label correctly set"},{"ancestorTitles":["<RadioButton />"],"failureMessages":[],"fullName":"<RadioButton /> Should be able to render without an id","location":null,"status":"passed","title":"Should be able to render without an id"},{"ancestorTitles":["<RadioButton />"],"failureMessages":[],"fullName":"<RadioButton /> Should set the defaultChecked-prop as the initial state","location":null,"status":"passed","title":"Should set the defaultChecked-prop as the initial state"},{"ancestorTitles":["<RadioButton />"],"failureMessages":[],"fullName":"<RadioButton /> Should have a default value of false for the checked-state","location":null,"status":"passed","title":"Should have a default value of false for the checked-state"},{"ancestorTitles":["<RadioButton />"],"failureMessages":[],"fullName":"<RadioButton /> Should call `onChange` when toggling radio button","location":null,"status":"passed","title":"Should call `onChange` when toggling radio button"}],"endTime":1560857530618,"message":"","name":"/Users/benjaminnaesen/Vault/avo2-components/src/components/RadioButton/RadioButton.test.tsx","startTime":1560857529854,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["<Avatar />"],"failureMessages":[],"fullName":"<Avatar /> Should be able to render","location":null,"status":"passed","title":"Should be able to render"},{"ancestorTitles":["<Avatar />"],"failureMessages":[],"fullName":"<Avatar /> Should correctly render the name","location":null,"status":"passed","title":"Should correctly render the name"},{"ancestorTitles":["<Avatar />"],"failureMessages":[],"fullName":"<Avatar /> Should correctly render the title","location":null,"status":"passed","title":"Should correctly render the title"},{"ancestorTitles":["<Avatar />"],"failureMessages":[],"fullName":"<Avatar /> Should correctly render a combination of the name & title","location":null,"status":"passed","title":"Should correctly render a combination of the name & title"},{"ancestorTitles":["<Avatar />"],"failureMessages":[],"fullName":"<Avatar /> Should render only the icon when no name or title was passed","location":null,"status":"passed","title":"Should render only the icon when no name or title was passed"},{"ancestorTitles":["<Avatar />"],"failureMessages":[],"fullName":"<Avatar /> Should correctly pass the necessary props to <AvatarIcon />","location":null,"status":"passed","title":"Should correctly pass the necessary props to <AvatarIcon />"}],"endTime":1560857530630,"message":"","name":"/Users/benjaminnaesen/Vault/avo2-components/src/components/Avatar/Avatar.test.tsx","startTime":1560857529902,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["<Grid />"],"failureMessages":[],"fullName":"<Grid /> Should be able to render","location":null,"status":"passed","title":"Should be able to render"},{"ancestorTitles":["<Grid />"],"failureMessages":[],"fullName":"<Grid /> Should correctly set the className","location":null,"status":"passed","title":"Should correctly set the className"},{"ancestorTitles":["<Grid />"],"failureMessages":[],"fullName":"<Grid /> Should correctly pass children","location":null,"status":"passed","title":"Should correctly pass children"}],"endTime":1560857530651,"message":"","name":"/Users/benjaminnaesen/Vault/avo2-components/src/components/Grid/Grid.test.tsx","startTime":1560857530016,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["<FormGroup />"],"failureMessages":[],"fullName":"<FormGroup /> Should be able to render","location":null,"status":"passed","title":"Should be able to render"},{"ancestorTitles":["<FormGroup />"],"failureMessages":[],"fullName":"<FormGroup /> Should correctly set the className","location":null,"status":"passed","title":"Should correctly set the className"},{"ancestorTitles":["<FormGroup />"],"failureMessages":[],"fullName":"<FormGroup /> Should render a label when it is passed","location":null,"status":"passed","title":"Should render a label when it is passed"},{"ancestorTitles":["<FormGroup />"],"failureMessages":[],"fullName":"<FormGroup /> Should not render a label when none is passed","location":null,"status":"passed","title":"Should not render a label when none is passed"},{"ancestorTitles":["<FormGroup />"],"failureMessages":[],"fullName":"<FormGroup /> Should set className and render an error when it is passed","location":null,"status":"passed","title":"Should set className and render an error when it is passed"},{"ancestorTitles":["<FormGroup />"],"failureMessages":[],"fullName":"<FormGroup /> Should not set className and not render an error when none is passed","location":null,"status":"passed","title":"Should not set className and not render an error when none is passed"},{"ancestorTitles":["<FormGroup />"],"failureMessages":[],"fullName":"<FormGroup /> Should correctly pass children","location":null,"status":"passed","title":"Should correctly pass children"}],"endTime":1560857530651,"message":"","name":"/Users/benjaminnaesen/Vault/avo2-components/src/components/Form/FormGroup.test.tsx","startTime":1560857529976,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["useDeselectEvent"],"failureMessages":[],"fullName":"useDeselectEvent Should call `onDeselect` when selecting a radio button with the same `name` and a different `value`","location":null,"status":"passed","title":"Should call `onDeselect` when selecting a radio button with the same `name` and a different `value`"},{"ancestorTitles":["useDeselectEvent"],"failureMessages":[],"fullName":"useDeselectEvent Should not call `onDeselect` when selecting the current radio button","location":null,"status":"passed","title":"Should not call `onDeselect` when selecting the current radio button"},{"ancestorTitles":["useDeselectEvent"],"failureMessages":[],"fullName":"useDeselectEvent Should not call `onDeselect` when selecting a radio button with a different `name`","location":null,"status":"passed","title":"Should not call `onDeselect` when selecting a radio button with a different `name`"}],"endTime":1560857530650,"message":"","name":"/Users/benjaminnaesen/Vault/avo2-components/src/hooks/useDeselectEvent.test.tsx","startTime":1560857529759,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["<DatePicker />"],"failureMessages":[],"fullName":"<DatePicker /> Should be able to render","location":null,"status":"passed","title":"Should be able to render"},{"ancestorTitles":["<DatePicker />"],"failureMessages":[],"fullName":"<DatePicker /> Should set the correct className","location":null,"status":"passed","title":"Should set the correct className"},{"ancestorTitles":["<DatePicker />"],"failureMessages":[],"fullName":"<DatePicker /> Should pass on the id","location":null,"status":"passed","title":"Should pass on the id"},{"ancestorTitles":["<DatePicker />"],"failureMessages":[],"fullName":"<DatePicker /> Should be able to set the disabled state","location":null,"status":"passed","title":"Should be able to set the disabled state"},{"ancestorTitles":["<DatePicker />"],"failureMessages":[],"fullName":"<DatePicker /> Should be able to set an initial value","location":null,"status":"passed","title":"Should be able to set an initial value"},{"ancestorTitles":["<DatePicker />"],"failureMessages":[],"fullName":"<DatePicker /> Should be able to set a placeholder value","location":null,"status":"passed","title":"Should be able to set a placeholder value"},{"ancestorTitles":["<DatePicker />"],"failureMessages":[],"fullName":"<DatePicker /> Should call the onChange handler when the input changes","location":null,"status":"passed","title":"Should call the onChange handler when the input changes"}],"endTime":1560857530734,"message":"","name":"/Users/benjaminnaesen/Vault/avo2-components/src/components/DatePicker/DatePicker.test.tsx","startTime":1560857529724,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["<ModalBackdrop />"],"failureMessages":[],"fullName":"<ModalBackdrop /> Should be able to render","location":null,"status":"passed","title":"Should be able to render"},{"ancestorTitles":["<ModalBackdrop />"],"failureMessages":[],"fullName":"<ModalBackdrop /> Should set the correct className(s)","location":null,"status":"passed","title":"Should set the correct className(s)"},{"ancestorTitles":["<ModalBackdrop />"],"failureMessages":[],"fullName":"<ModalBackdrop /> Should set the correct className when `visible`","location":null,"status":"passed","title":"Should set the correct className when `visible`"}],"endTime":1560857530981,"message":"","name":"/Users/benjaminnaesen/Vault/avo2-components/src/components/Modal/ModalBackdrop.test.tsx","startTime":1560857530566,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["<Column />"],"failureMessages":[],"fullName":"<Column /> Should be able to render","location":null,"status":"passed","title":"Should be able to render"},{"ancestorTitles":["<Column />"],"failureMessages":[],"fullName":"<Column /> Should correctly set the sizing className","location":null,"status":"passed","title":"Should correctly set the sizing className"},{"ancestorTitles":["<Column />"],"failureMessages":[],"fullName":"<Column /> Should correctly pass children","location":null,"status":"passed","title":"Should correctly pass children"}],"endTime":1560857531015,"message":"","name":"/Users/benjaminnaesen/Vault/avo2-components/src/components/Grid/Column.test.tsx","startTime":1560857530610,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["<Form />"],"failureMessages":[],"fullName":"<Form /> Should be able to render","location":null,"status":"passed","title":"Should be able to render"},{"ancestorTitles":["<Form />"],"failureMessages":[],"fullName":"<Form /> Should correctly set the className","location":null,"status":"passed","title":"Should correctly set the className"},{"ancestorTitles":["<Form />"],"failureMessages":[],"fullName":"<Form /> Should set the correct type className","location":null,"status":"passed","title":"Should set the correct type className"},{"ancestorTitles":["<Form />"],"failureMessages":[],"fullName":"<Form /> Should correctly pass children","location":null,"status":"passed","title":"Should correctly pass children"}],"endTime":1560857531024,"message":"","name":"/Users/benjaminnaesen/Vault/avo2-components/src/components/Form/Form.test.tsx","startTime":1560857530580,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["<Spinner />"],"failureMessages":[],"fullName":"<Spinner /> Should be able to render","location":null,"status":"passed","title":"Should be able to render"},{"ancestorTitles":["<Spinner />"],"failureMessages":[],"fullName":"<Spinner /> Should correctly set the className","location":null,"status":"passed","title":"Should correctly set the className"},{"ancestorTitles":["<Spinner />"],"failureMessages":[],"fullName":"<Spinner /> Should have 12 spinner bars","location":null,"status":"passed","title":"Should have 12 spinner bars"},{"ancestorTitles":["<Spinner />"],"failureMessages":[],"fullName":"<Spinner /> Should be able to render as a large spinner","location":null,"status":"passed","title":"Should be able to render as a large spinner"}],"endTime":1560857531034,"message":"","name":"/Users/benjaminnaesen/Vault/avo2-components/src/components/Spinner/Spinner.test.tsx","startTime":1560857530479,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["<Box />"],"failureMessages":[],"fullName":"<Box /> Should be able to render","location":null,"status":"passed","title":"Should be able to render"},{"ancestorTitles":["<Box />"],"failureMessages":[],"fullName":"<Box /> Should set the correct className","location":null,"status":"passed","title":"Should set the correct className"},{"ancestorTitles":["<Box />"],"failureMessages":[],"fullName":"<Box /> Should set the correct className when passed the `condensed`-prop","location":null,"status":"passed","title":"Should set the correct className when passed the `condensed`-prop"},{"ancestorTitles":["<Box />"],"failureMessages":[],"fullName":"<Box /> Should correctly pass children","location":null,"status":"passed","title":"Should correctly pass children"}],"endTime":1560857531040,"message":"","name":"/Users/benjaminnaesen/Vault/avo2-components/src/components/Box/Box.test.tsx","startTime":1560857530573,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["<AvatarIcon />"],"failureMessages":[],"fullName":"<AvatarIcon /> Should be able to render","location":null,"status":"passed","title":"Should be able to render"},{"ancestorTitles":["<AvatarIcon />"],"failureMessages":[],"fullName":"<AvatarIcon /> Should correctly set the className","location":null,"status":"passed","title":"Should correctly set the className"},{"ancestorTitles":["<AvatarIcon />"],"failureMessages":[],"fullName":"<AvatarIcon /> Should correctly render the initials","location":null,"status":"passed","title":"Should correctly render the initials"},{"ancestorTitles":["<AvatarIcon />"],"failureMessages":[],"fullName":"<AvatarIcon /> Should be able to render as a small avatar","location":null,"status":"passed","title":"Should be able to render as a small avatar"},{"ancestorTitles":["<AvatarIcon />"],"failureMessages":[],"fullName":"<AvatarIcon /> Should be able to render an image as the avatar","location":null,"status":"passed","title":"Should be able to render an image as the avatar"}],"endTime":1560857531054,"message":"","name":"/Users/benjaminnaesen/Vault/avo2-components/src/components/Avatar/AvatarIcon.test.tsx","startTime":1560857530643,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["<Image />"],"failureMessages":[],"fullName":"<Image /> Should be able to render","location":null,"status":"passed","title":"Should be able to render"},{"ancestorTitles":["<Image />"],"failureMessages":[],"fullName":"<Image /> Should set the correct className","location":null,"status":"passed","title":"Should set the correct className"},{"ancestorTitles":["<Image />"],"failureMessages":[],"fullName":"<Image /> Should set the correct className in wide mode","location":null,"status":"passed","title":"Should set the correct className in wide mode"},{"ancestorTitles":["<Image />"],"failureMessages":[],"fullName":"<Image /> Should correctly pass on `src` and `alt` to the <img>","location":null,"status":"passed","title":"Should correctly pass on `src` and `alt` to the <img>"}],"endTime":1560857531071,"message":"","name":"/Users/benjaminnaesen/Vault/avo2-components/src/components/Image/Image.test.tsx","startTime":1560857530632,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["<Badge />"],"failureMessages":[],"fullName":"<Badge /> Should be able to render","location":null,"status":"passed","title":"Should be able to render"},{"ancestorTitles":["<Badge />"],"failureMessages":[],"fullName":"<Badge /> Should set the correct className","location":null,"status":"passed","title":"Should set the correct className"},{"ancestorTitles":["<Badge />"],"failureMessages":[],"fullName":"<Badge /> Should set the correct className for every type","location":null,"status":"passed","title":"Should set the correct className for every type"},{"ancestorTitles":["<Badge />"],"failureMessages":[],"fullName":"<Badge /> Should render the text correctly","location":null,"status":"passed","title":"Should render the text correctly"}],"endTime":1560857531087,"message":"","name":"/Users/benjaminnaesen/Vault/avo2-components/src/components/Badge/Badge.test.tsx","startTime":1560857530666,"status":"passed","summary":""}],"wasInterrupted":false}