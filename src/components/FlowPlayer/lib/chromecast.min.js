/*
   Flowplayer
   @version 2.1.8
   @built   Mon, 07 Oct 2019 16:21:42 GMT
   @commit  2c6a33272d4d90ac92864a3a7b2f1b6440964b0b
   @license Flowplayer commercial license - https://flowplayer.com/commercial-license
*/
/* eslint-disable */
!function (e, t) { "object" == typeof exports && "undefined" != typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define(t) : (e.flowplayer = e.flowplayer || {}, e.flowplayer.chromecast = t()) }(this, function () { "use strict"; function e(e, t) { for (var n in t) e[n] = t[n]; return e } function t(e) { return Array.isArray(e) ? e.slice(0) : e.split(".") } function n(e, n, r) { for (n = t(n); n.length;) { if (void 0 === e || null === e) return r; e = e[n.shift()] } return void 0 === e || null === e ? r : e } function r(e) { return ne.call(e) } function a(e) { var t = document.createElement("a"); t.href = e; var n = t.pathname && t.pathname.split("."); return n.length > 1 && n[n.length - 1] } function o(e) { switch (e) { case "video/mpd": return "application/dash+xml"; case "video/m3u8": return "application/x-mpegurl"; default: return e } } function i(e) { var t = e.split("{"), n = t[1]; if (!n) { return [{ src: e, type: o("video/" + a(e)) }] } return n.slice(0, -1).split(",").map(function (e) { return { src: t[0] + e, type: o("video/" + e) } }) } function c(e) { return "function" == typeof e } function u() { throw new Error("Function was expected as Argument[0]") } function s(e) { if (!(this instanceof s)) return new s(e); var t = this; return t.data = e, t.tap = function () { var e = re.call(arguments), n = e.shift(); return n == s.lift ? t.data : c(n) ? (n.apply(t, [t.data].concat(e)), t) : void u() }, t.into = t.fmap = function () { var e = re.call(arguments), n = e.shift(); return n == s.lift ? t.data : c(n) ? s(n.apply(t, [t.data].concat(e))) : void u() }, t.unwrap = function () { return t.data }, t } function f() { return d().fmap(s.maybe, function (e) { return e.getCurrentSession() }) } function l() { return f().fmap(s.maybe, function (e) { return e.getMediaSession() }) } function d() { return s.of(window).fmap(n, "cast.framework.CastContext").fmap(s.maybe, function (e) { return e.getInstance() }) } function p() { return n(window, "flowplayer.instances", []) } function m() { return p().filter(function (e) { return D.is_same(e) }) } function E() { return p().filter(function (e) { return !D.is_same(e) }) } function y(e, t) { m().forEach(function (n) { n.emit(e, t) }) } function v(e, t) { E().forEach(function (n) { n.emit(e, t) }) } function h(e, t) { p().forEach(function (n) { n.emit(e, t) }) } function T() { de.player = new cast.framework.RemotePlayer, de.controller = new cast.framework.RemotePlayerController(de.player), de.controller.addEventListener(cast.framework.RemotePlayerEventType.ANY_CHANGE, S), de.controller.addEventListener(cast.framework.RemotePlayerEventType.MEDIA_INFO_CHANGED, function () { v(ce) }) } function S(e) { y(fe, e) } function g(e) { var t = [].slice.call(e.querySelectorAll("track")), r = n(e, "hls.subtitleTracks", []); return [].concat.apply([], t, r).filter(function (e) { return "string" == typeof e.lang }) } function _(e) { return g(e).map(function (e, t) { var n = new chrome.cast.media.Track(t, chrome.cast.media.TrackType.TEXT); return n.trackContentType = "text/vtt", n.subtype = chrome.cast.media.TextTrackType.SUBTITLES, n.trackContentId = e.src || e.url, n.name = e.label || e.name, n.language = e.lang, n }) } function w(e) { C().fmap(s.maybe, function (t) { var n = new chrome.cast.media.EditTracksInfoRequest(e); t.editTracksInfo(n, console.debug, console.error) }) } function A(e, t, r) { f().fmap(s.maybe, function (t) { var a = D.get_media(e); if (a) { var o = new chrome.cast.media.MediaInfo(a.src, a.type); o.tracks = _(e), o.metadata = new chrome.cast.media.GenericMediaMetadata; var i = new chrome.cast.media.LoadRequest(o); isNaN(e.currentTime) || (i.currentTime = e.currentTime), o.tracks.length && (i.activeTrackIds = g(e).filter(function (e) { return "showing" == n(e, "track.mode", e.mode) }).map(function (e, t) { return t })), console.debug("cast:request(%o)", i), t.loadMedia(i).then(function () { HTMLMediaElement.prototype.pause.call(e), T(), v(ce) }, r) } }) } function C() { return l() } function N() { return !!l().unwrap() } function O() { return !!f().unwrap() } function b() { return f().fmap(s.maybe, function (e) { return e.getCastDevice().friendlyName }).unwrap() } function L() { return C().fmap(s.maybe, n, "media.duration").unwrap() } function R() { return C().fmap(s.maybe, n, "playerState").unwrap() } function I(e) { return e ? k(e) : C().fmap(s.maybe, function (e) { return e.getEstimatedTime() }).unwrap() } function k(e) { return C().fmap(s.maybe, function (t) { var n = new chrome.cast.media.SeekRequest; return n.currentTime = e, t.seek(n) }), e } function U() { return C().fmap(s.maybe, function (e) { return e.play() }).unwrap() } function P() { return C().fmap(s.maybe, function (e) { return e.pause() }).unwrap() } function M(e, t) { var n = {}; n.play = function () { return D.is_same(t) ? U() : N() ? D.load(t) : void D.load(t) }, n.pause = function () { return D.is_same(t) ? P() : HTMLMediaElement.prototype.pause.call(t) }, n.currentTime = { get: I, set: I }, n.duration = { get: L }, n.paused = { get: function () { return "PAUSED" === R() } }, n.playing = { get: function () { return "PLAYING" === R() } }, Object.keys(n).forEach(function (e) { if ("object" == typeof n[e]) return Object.defineProperty(t, e, { get: function () { return D.is_same(t) ? n[e].get() : Object.getOwnPropertyDescriptor(HTMLMediaElement.prototype, e).get.call(this) }, set: function (r) { return D.is_same(t) ? n[e].set(r) : Object.getOwnPropertyDescriptor(HTMLMediaElement.prototype, e).set.call(this, r) } }); var r = t[e]; t[e] = function () { var t = [].slice.apply(arguments); return O() ? n[e].apply(this, t) : r.apply(this, t) } }) } function D(e) { this.video = e, M(this, e) } function x() { } function j(e, t) { var n = document.getElementsByTagName("head")[0], r = document.createElement("script"); r.src = e, r.onload = r.onerror = t || x, n.appendChild(r) } function G() { if (H()) return q(); j(ye), window[he] = function () { F(), q() } } function H() { return !!document.querySelector("script[src='" + ye + "']") } function Y() { return "object" == typeof window.cast } function q() { if (Y()) return h(ae); h(oe) } function F() { Y() && d().fmap(s.maybe, function (e) { e.setOptions({ receiverApplicationId: ve, autoJoinPolicy: chrome.cast.AutoJoinPolicy.ORIGIN_SCOPED }), e.addEventListener(cast.framework.CastContextEventType.CAST_STATE_CHANGED, function (e) { h(ue, e) }), e.addEventListener(cast.framework.CastContextEventType.SESSION_STATE_CHANGED, function (e) { T(), h(se, e) }) }) } function V(e) { var t = document.createEvent("Event"); return t.initEvent(e, !1, !0), t } function W(t) { return t.emit = function (n, r, a) { a = a || {}; var o = V(n); return r && e(o, { data: r || {} }), t.dispatchEvent(o), !1 === a.return_self ? o : t }, t.on = function (e, n) { return "string" == typeof e && (e = e.split(" ")), e.forEach(function (e) { t.addEventListener(e, n) }), t }, t.off = function (e, n) { return t.removeEventListener(e, n), t }, t.one = t.once = function (e, n) { function r(a) { t.off(e, r), n(a) } return t.on(e, r) }, t } function z(e, t, n) { var r = X(document.createElement(e)); if (_e(t) && (n = t, t = !1), _e(n) || (n = [n]), r.append(n.filter(function (e) { return e })), "object" != typeof t) return r; for (var a in t) a in r ? r[a] = t[a] : r.setAttribute(a, t[a]); return r } function B(e) { return e && e[Oe] } function K(e) { var t = e.tagName; e[Oe] = 1, e.find = function (t) { var n = e.querySelector(t); return n ? X(n) : n }, e.html = function (t) { return e.innerHTML = t, e }, e.empty = function () { return e.innerHTML = Se, e }, e.offset = function () { var t = { top: 0, left: 0 }, n = e; do { t.left += n.offsetLeft || 0, t.top += n.offsetTop || 0 } while (n = n.offsetParent); return t }, e.innerWidth = function () { var t = getComputedStyle(e); return e.clientWidth - parseFloat(t.paddingLeft) - parseFloat(t.paddingRight) }; var n = e.insert = function (t, n) { return _e(n) ? n.map(function (n) { return e.insert(t, n) })[0] : (n = "string" == typeof n ? e.insertAdjacentHTML(t, n) : e.insertAdjacentElement ? e.insertAdjacentElement(t, n) : e.appendChild(n), X(n)) }; return e.append = n.bind(e, "beforeend"), e.prepend = n.bind(e, "afterbegin"), e.css = function (t, n) { if ("object" == typeof t) { for (var r in t) e.css(r, t[r]); return e } return void 0 === n ? getComputedStyle(e)[t] : (1 * n && (n += "px"), e.style[t] = n, e) }, e.show = function () { return e.css({ display: ~Ce.indexOf(t) ? "inline" : "block" }) }, e.hide = function () { return e.css({ display: "none" }) }, e.remove = function () { var t = e.parentNode; t && t.removeChild(e) }, e.attr = function (t, n) { return void 0 == n ? e.getAttribute(t) : (e.setAttribute(t, n), e) }, e.txt = function (t) { return e.textContent = t, e }, e.fp = function (t) { return e.addClass("fp-" + t) }, e.addClass = function (t) { return t.split(ge).forEach(function (t) { e.hasClass(t) || (e.className += (e.className ? ge : Se) + t) }), e }, e.removeClass = function (t) { t = t.split(ge); var n = e.className.split(ge); return e.className = n.filter(function (e) { return !~t.indexOf(e) }).join(" "), e }, e.toggleClass = function (t, n) { return void 0 === n && (n = !e.hasClass(t)), n ? e.addClass(t) : e.removeClass(t) }, e.findAll = function (t) { return r(e.querySelectorAll(t)) }, e.hasClass = function (t) { return ~e.className.split(ge).indexOf(t) }, e } function X(e) { return void 0 === e ? e : B(e) ? e : K(W(e)) } function J(e, t) { if ("string" == typeof e && "<" == e[0]) return z(e.slice(1, -1), t); if ("string" != typeof e) return X(e); var n = t instanceof HTMLElement && t.querySelector(".fp-" + e) || document.querySelector(e); return n ? X(n) : void 0 } function Q(e, t) { var n = J.div("fp-chromecast"), r = J.el("p"); return t.poster && (n.style.backgroundImage = ["url(", t.poster, ")"].join("")), n.append(r), e.prepend(n), { splash: n, indicator: r } } function Z(e, t) { var n = J.el("span").addClass("fp-cast-button"); n.append(J.el("google-cast-launcher")), e.prepend(n), n.on("click", function () { const e = f().unwrap(); if (e) return e.endSession(!0); t.emit(ie) }) } function $(e, t) { if (0 != e.root) { var r = e.root.querySelector(".fp-chromecast p"); if (r) { var a = e._t("chromecast.message", "{{state}} on {{device}}"), o = ""; o = a.replace("{{device}}", n(t, "device", "chromecast")), o = o.replace("{{state}}", n(t, "state", "").toLowerCase()), r.txt(o) } } } function ee() { return "localhost" === location.hostname || "127.0.0.1" === location.hostname } function te() { return "https:" === location.protocol } var ne = [].slice, re = [].slice; s.of = s, s.lift = function (e) { return e instanceof s ? e.data : e }, s._apply = function (e, t) { if (0 == t.length) return e(); if (1 == t.length) return e(t[0]); if (2 == t.length) return e(t[0], t[1]); if (3 == t.length) return e(t[0], t[1], t[2]); if (4 == t.length) return e(t[0], t[1], t[2], t[3]); if (5 == t.length) return e(t[0], t[1], t[2], t[3], t[4]); throw new Error("Pipe._apply() does not support arity > 5") }, s.maybe = function (e, t, n) { return e ? s._apply(t, [e].concat(re.call(arguments, 2, arguments.length))) : e }, s.curry = function (e, t, n) { return t = t || [], t.length > e.length - 1 ? e.apply(n, t) : function () { return t = t.concat(re.call(arguments)), s.curry(e, t, n) } }; var ae = "chromecast:available", oe = "chromecast:unavailable", ie = "chromecast:start", ce = "chromecast:idle", ue = "chromecast:state:changed", se = "chromecast:session:changed", fe = "chromecast:field:update", le = { PAUSED: "isPaused", CURRENT_TIME: "currentTime", DURATION: "duration", CONNECTED: "isConnected", PLAYER_STATE: "playerState", SAVED_STATE: "savedPlayerState", DISPLAY_NAME: "displayName", STATUS: "statusText" }, de = { player: void 0, controller: void 0 }, pe = Object.freeze({ getCurrentSession: f, getMediaSession: l, getCastContext: d, players: p, casting_players: m, idle_players: E, broadcast_to_active: y, broadcast_to_idle: v, broadcast: h, FIELDS: le, SINGLETONS: de, refresh_singletons: T, onremotechange: S, tracks: g, cast_tracks: _, editTracks: w }), me = Object.freeze({ load: A, media: C, has_media: N, exists: O, device_name: b, duration: L, state: R, currentTime: I, seek: k, play: U, pause: P }), Ee = /(video\/mp4)|(application\/x-mpegurl)|(video\/mpd)|(application\/dash\+xml)/; D.of = function (e) { return e.sender ? e.sender : (e.sender = new D(e), e.sender) }, D.normalize_src = function (e) { return s.of(e).fmap(n, "opts.src", []).fmap(function (e) { return "string" == typeof e ? i(e) : e }).fmap(function (e) { return e.map(function (e) { return "string" == typeof e ? i(e) : e }) }).fmap(function (e) { return [].concat.apply([], e) }).fmap(function (e) { return e.filter(D.is_supported_media) }) }, D.is_same = function (e) { const t = D.normalize_src(e).unwrap().map(function (e) { return n(e, "src") }); return C().fmap(s.maybe, n, "media.contentId").fmap(s.maybe, function (e) { return !!~t.indexOf(e) }).unwrap() }, D.maybe = function (e, t) { e.sender && t(e.sender, e) }, D.getEstimatedTime = function () { return l().fmap(s.maybe, function (e) { return e.getEstimatedTime() }).unwrap() }, D.is_supported_media = function (e) { return n(e, "type", "").toString().match(Ee) }, D.load = function (e) { A(e, console.debug, console.error) }, D.destroy = function (e) { e.video = 0 }, D.get_media = function (e) { return D.normalize_src(e).fmap(s.maybe, function (e) { return e.pop() }).unwrap() }; var ye = "https://www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1", ve = "6F71FA7C", he = "__onGCastApiAvailable", Te = "is-chromecast-playing", Se = "", ge = " ", _e = Array.isArray, we = "undefined" != typeof window && W(window), Ae = "undefined" != typeof document && W(document), Ce = ["span", "a", "em", "p", "i"], Ne = Ce.concat(["div", "strong", "video", "img", "ol", "ul", "li", "script"]), Oe = "__flowplayer__"; J.window = we, J.document = Ae, J.el = z, Ne.forEach(function (e) { J[e] = function (t, n) { return "string" == typeof t && (t = { class: t }), z(e, t, n) } }); var be = { MOUNT: "mount", ERROR: "error", CONTEXT_MENU: "contextmenu", CLICK: "click", DBL_CLICK: "dblclick", KEYUP: "keyup", KEYDOWN: "keydown", LOAD: "load", MOUSE_ENTER: "mouseenter", MOUSE_LEAVE: "mouseleave", MOUSE_UP: "mouseup", MOUSE_DOWN: "mousedown", MOUSE_MOVE: "mousemove", TOUCH_START: "touchstart", TOUCH_MOVE: "touchmove", TOUCH_END: "touchend", TOUCH_CANCEL: "touchcancel", RESIZE: "resize", SCROLL: "scroll", FULLSCREEN_ENTER: "fullscreenenter", FULLSCREEN_EXIT: "fullscreenexit", FULLSCREEN_CHANGE: "fullscreenchange", METADATA: "loadedmetadata", DATA: "loadeddata", PROGRESS: "progress", TIME_UPDATE: "timeupdate", LOAD_START: "loadstart", VOLUME_CHANGE: "volumechange", PAUSE: "pause", PLAYING: "playing", PLAY: "play", WAITING: "waiting", CAN_PLAY: "canplay", ENDED: "ended", SEEKED: "seeked", SEEKING: "seeking", DURATION_CHANGE: "durationchange", BEFORE_PLAY: "beforeplay", BEFORE_PAUSE: "beforepause", STATE: "state", CUEPOINTS: "cuepoints", CUEPOINT_START: "cuepointstart", CUEPOINT_END: "cuepointend", VIEW_ENTER: "viewenter", VIEW_LEAVE: "viewleave", SOURCE: "src", RECOVER: "recover", REAP: "reap", CONFIG: "config", QUALITIES: "qualities", SET_QUALITY: "quality:set", NON_RECOVERABLE_ERROR: "error:fatal", RECOMMENDATIONS_READY: "recommendationsready", AUDIO_ONLY_SOURCE: "audioonlysource" }; return window.CastSession = me, window.CastUtils = pe, function (e, t) { if ("object" == typeof exports && "undefined" != typeof module) return t; "flowplayer" in e || (e.flowplayer = { extensions: [] }); var n = e.flowplayer; return "function" == typeof n ? (n(t), t) : (Array.isArray(n.extensions) || (n.extensions = []), ~n.extensions.indexOf(t) || n.extensions.push(t), t) }(window, function (e, t, r) { te() || ee() || console.warn("Secure URL required to enable Chromecast"), G(); var a = { pending: void 0 }; r.on(be.REAP, function () { D.maybe(r, D.destroy) }), r.on(be.MOUNT, function () { var a = n(t, "middle"); a && Q(a, { poster: e.poster }); var o = n(t, "ui.header.secondary"); o && Z(o, r) }), r.on(ae, function () { r.setState("is-cast-available", !0), D.of(r) }), r.on(oe, function () { r.setState("is-cast-available", !1), D.maybe(r, D.destroy) }), r.on(ie, function () { if (N()) return D.load(r); a.pending = !0 }), r.on("tracks:text:updated", function (e) { if (N()) return e.data ? void w(g(r).map(function (e, t) { return { track: e.track, id: t } }).filter(function (t) { return t.track == e.data }).map(function (e) { return e.id })) : w([]) }), r.on(ce, function () { r.setState(Te, !1), r.setState(void 0, !0) }), r.on(fe, function (e) { var t = n(e, "data.field"), a = n(e, "data.value"); switch (t) { case le.CURRENT_TIME: return r.emit(be.TIME_UPDATE, a); case le.PLAYER_STATE: if ("PLAYING" == a) return r.emit(be.PLAYING); if ("PAUSED" == a) return r.emit(be.PAUSE); return; case "mediaInfo": return $(r, { device: b(), state: R() }), r.setState(void 0, !1), r.setState(Te, !0) } }), r.on(se, function (e) { switch (n(e, "data.sessionState")) { case cast.framework.SessionState.SESSION_ENDED: return r.setState(Te, !1); case cast.framework.SessionState.SESSION_RESUMED: case cast.framework.SessionState.SESSION_STARTED: a.pending && (a.pending = !1, D.load(r)) } }) }) });
